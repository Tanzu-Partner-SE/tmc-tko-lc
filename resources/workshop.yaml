apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: tko-day1
  annotations:
    kapp.k14s.io/update-strategy: always-replace
spec:
  title: Partner Demo Workshop - Module 2 with vCluster
  description: Workshop created to demo the TKO Day 1 operations.
  vendor: eduk8s.io
  difficulty: beginner
  duration: 15m
  url: https://github.com/Tanzu-Partner-SE/tmc-tko-lc
  content:
    files: github.com/Tanzu-Partner-SE/tmc-tko-lc?ref=main
    image: harbor.mytanzusandbox.com/learningcenter/tko-day1:0.0.4
  session:
    resources:
      storage: 5Gi
    namespaces:
      #budget: small
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
        vendor: octant
      editor:
        enabled: true
      docker:
        enabled: true
    objects:
      - apiVersion: v1
        kind: LimitRange
        metadata:
          name: resource-limits
        spec:
          limits:
            - max:
                cpu: "4"
                memory: 10Gi
              min:
                cpu: 5m
                memory: 32Mi
              type: Pod
            - default:
                cpu: 250m
                memory: 256Mi
              defaultRequest:
                cpu: 50m
                memory: 128Mi
              max:
                cpu: "4"
                memory: 10Gi
              min:
                cpu: 5m
                memory: 32Mi
              type: Container
            - max:
                storage: 10Gi
              min:
                storage: 1Gi
              type: PersistentVolumeClaim
      - apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: vc-cluster
          namespace: $(session_namespace)
          labels:
            app: vcluster
            chart: "vcluster-0.6.0"
            release: "cluster"
            heritage: "Helm"
      - kind: Role
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: cluster
          namespace: $(session_namespace)
          labels:
            app: vcluster
            chart: "vcluster-0.6.0"
            release: "cluster"
            heritage: "Helm"
        rules:
          - apiGroups: [""]
            resources:
              [
                "configmaps",
                "secrets",
                "services",
                "pods",
                "pods/attach",
                "pods/portforward",
                "pods/exec",
                "endpoints",
                "persistentvolumeclaims",
              ]
            verbs:
              ["create", "delete", "patch", "update", "get", "list", "watch"]
          - apiGroups: [""]
            resources: ["events", "pods/log"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["networking.k8s.io"]
            resources: ["ingresses"]
            verbs:
              ["create", "delete", "patch", "update", "get", "list", "watch"]
          - apiGroups: ["apps"]
            resources: ["statefulsets", "replicasets", "deployments"]
            verbs: ["get", "list", "watch"]
      - kind: RoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: cluster
          namespace: $(session_namespace)
          labels:
            app: vcluster
            chart: "vcluster-0.6.0"
            release: "cluster"
            heritage: "Helm"
        subjects:
          - kind: ServiceAccount
            name: vc-cluster
            namespace: $(session_namespace)
        roleRef:
          kind: Role
          name: cluster
          apiGroup: rbac.authorization.k8s.io
      - apiVersion: v1
        kind: Service
        metadata:
          name: cluster
          namespace: $(session_namespace)
          labels:
            app: vcluster
            chart: "vcluster-0.6.0"
            release: "cluster"
            heritage: "Helm"
        spec:
          type: ClusterIP
          ports:
            - name: https
              port: 443
              targetPort: 8443
              protocol: TCP
          selector:
            app: vcluster
            release: cluster
      - apiVersion: v1
        kind: Service
        metadata:
          name: cluster-headless
          namespace: $(session_namespace)
          labels:
            app: cluster-vcluster
            chart: "vcluster-0.6.0"
            release: "cluster"
            heritage: "Helm"
        spec:
          ports:
            - name: https
              port: 443
              targetPort: 8443
              protocol: TCP
          clusterIP: None
          selector:
            app: vcluster
            release: "cluster"
      - apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: cluster
          namespace: $(session_namespace)
          labels:
            app: vcluster
            chart: "vcluster-0.6.0"
            release: "cluster"
            heritage: "Helm"
        spec:
          serviceName: cluster-headless
          replicas: 1
          selector:
            matchLabels:
              app: vcluster
              release: cluster
          volumeClaimTemplates:
            - metadata:
                name: data
              spec:
                accessModes: ["ReadWriteOnce"]
                storageClassName:
                resources:
                  requests:
                    storage: 5Gi
          template:
            metadata:
              labels:
                app: vcluster
                release: cluster
            spec:
              terminationGracePeriodSeconds: 10
              nodeSelector: {}
              affinity: {}
              tolerations: []
              serviceAccountName: vc-cluster
              volumes:
              containers:
                - image: rancher/k3s:v1.23.3-k3s1
                  name: vcluster
                  # k3s has a problem running as pid 1 and disabled agents on cgroupv2
                  # nodes as it will try to evacuate the cgroups there. Starting k3s
                  # through a shell makes it non pid 1 and prevents this from happening
                  command:
                    - /bin/sh
                  args:
                    - -c
                    - /bin/k3s
                      server
                      --write-kubeconfig=/data/k3s-config/kube-config.yaml
                      --data-dir=/data
                      --disable=traefik,servicelb,metrics-server,local-storage,coredns
                      --disable-network-policy
                      --disable-agent
                      --disable-scheduler
                      --disable-cloud-controller
                      --flannel-backend=none
                      --kube-controller-manager-arg=controllers=*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle
                      --service-cidr=100.64.0.0/13 && true
                  env: []
                  securityContext:
                    allowPrivilegeEscalation: false
                  volumeMounts:
                    - mountPath: /data
                      name: data
                  resources:
                    limits:
                      memory: 2Gi
                    requests:
                      cpu: 200m
                      memory: 256Mi
                - name: syncer
                  image: "loftsh/vcluster:0.6.0"
                  args:
                    - --name=cluster
                    - "--tls-san=$(session_namespace)-cluster.$(ingress_domain)"
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8443
                      scheme: HTTPS
                    failureThreshold: 10
                    initialDelaySeconds: 60
                    periodSeconds: 2
                  readinessProbe:
                    httpGet:
                      path: /readyz
                      port: 8443
                      scheme: HTTPS
                    failureThreshold: 30
                    periodSeconds: 2
                  securityContext:
                    allowPrivilegeEscalation: false
                  env: []
                  volumeMounts:
                    - mountPath: /data
                      name: data
                      readOnly: true
                  resources:
                    limits:
                      memory: 1Gi
                    requests:
                      cpu: 100m
                      memory: 128Mi
      - apiVersion: projectcontour.io/v1
        kind: HTTPProxy
        metadata:
          name: $(session_namespace)-vcluster-1
          namespace: $(session_namespace)
        spec:
          virtualhost:
            fqdn: $(session_namespace)-cluster.$(ingress_domain)
            tls:
              passthrough: true
          tcpproxy:
            services:
              - name: cluster
                port: 443
